(function () {
  console.log("Initializing the script to generate PDFs from images...");

  // Create a script element to load jsPDF library dynamically
  let script = document.createElement("script");
  script.onload = function () {
    const { jsPDF } = window.jspdf;

    // Initialize variables
    let pdf = null;
    let imgElements = document.getElementsByTagName("img"); // Get all <img> elements on the page
    let validImgs = []; // Array to hold valid images for the PDF
    let initPDF = true; // Flag to check if PDF is initialized

    console.log("Scanning the webpage for images...");

    // Loop through images and filter for valid "blob:" source images
    for (let i = 0; i < imgElements.length; i++) {
      let img = imgElements[i];

      let checkURLString = "blob:https://drive.google.com/";
      if (img.src.substring(0, checkURLString.length) !== checkURLString) {
        continue;
      }

      validImgs.push(img); // Add valid images to the array
    }

    console.log(`${validImgs.length} valid images found.`);
    console.log("Starting the PDF generation process...");

    // Process each valid image and add it to the PDF
    for (let i = 0; i < validImgs.length; i++) {
      let img = validImgs[i];
      let canvasElement = document.createElement("canvas");
      let con = canvasElement.getContext("2d");
      canvasElement.width = img.naturalWidth; // Set canvas dimensions to image dimensions
      canvasElement.height = img.naturalHeight;
      con.drawImage(img, 0, 0, img.naturalWidth, img.naturalHeight);
      let imgData = canvasElement.toDataURL(); // Convert canvas content to image data URL

      // Determine orientation (landscape or portrait) based on image dimensions
      let orientation = img.naturalWidth > img.naturalHeight ? "l" : "p";
      let pageWidth = img.naturalWidth;
      let pageHeight = img.naturalHeight;

      // Initialize the PDF document
      if (initPDF) {
        pdf = new jsPDF({
          orientation: orientation,
          unit: "px",
          format: [pageWidth, pageHeight],
        });
        initPDF = false;
      }

      // Add the image to the PDF
      if (!initPDF) {
        pdf.addImage(imgData, "PNG", 0, 0, pageWidth, pageHeight, "", "SLOW");
        if (i !== validImgs.length - 1) {
          pdf.addPage(); // Add a new page for the next image
        }
      }

      // Log the processing percentage
      const percentages = Math.floor(((i + 1) / validImgs.length) * 100);
      console.log(`Processing images: ${percentages}% complete.`);
    }

    // Generate the PDF title from metadata or add ".pdf" if not present
    let titleElement = document.querySelector('meta[itemprop="name"]');
    let title = titleElement ? titleElement.content : "GeneratedDocument";
    if (title.split(".").pop() !== "pdf") {
      title = title + ".pdf";
    }

    // Download the generated PDF
    console.log("Downloading the PDF...");
    pdf.save(title, { returnPromise: true }).then(() => {
      document.body.removeChild(script); // Clean up by removing the script element
      console.log("PDF download complete.");
    });
  };

  // Load the jsPDF library using a secure and trusted URL
  let scriptURL = "https://unpkg.com/jspdf@latest/dist/jspdf.umd.min.js";
  let trustedURL;
  if (window.trustedTypes && trustedTypes.createPolicy) {
    const policy = trustedTypes.createPolicy("myPolicy", {
      createScriptURL: (input) => {
        return input;
      },
    });
    trustedURL = policy.createScriptURL(scriptURL);
  } else {
    trustedURL = scriptURL;
  }

  script.src = trustedURL;
  document.body.appendChild(script);
})();
